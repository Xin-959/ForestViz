# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'visualization.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] = ['SimHei']  # 设置中文字体
plt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QSizePolicy
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
import matplotlib.pyplot as plt
import numpy as np


class VisualizationTab(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def init_ui(self):
        # 创建Matplotlib画布
        self.figure, self.ax = plt.subplots()
        self.canvas = FigureCanvasQTAgg(self.figure)
        self.canvas.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # 布局
        layout = QVBoxLayout()
        layout.addWidget(self.canvas)
        self.setLayout(layout)

        # 初始空图
        self.ax.text(0.5, 0.5, '等待数据加载...',
                     ha='center', va='center', fontsize=12)
        self.canvas.draw()

    def update_plots(self, model):
        """更新特征重要性图表"""
        self.figure.clear()
        self.ax = self.figure.add_subplot(111)

        try:
            features = self.parent_window.data_tab.get_feature_names()
            importances = model.feature_importances_

            # 排序
            indices = np.argsort(importances)
            features = [features[i] for i in indices]
            importances = importances[indices]

            # 绘制水平条形图
            self.ax.barh(range(len(features)), importances, align='center')
            self.ax.set_yticks(range(len(features)))
            self.ax.set_yticklabels(features)
            self.ax.set_xlabel('特征重要性')
            self.ax.set_title('随机森林特征重要性排序')

            self.canvas.draw()

        except Exception as e:
            self.ax.text(0.5, 0.5, f'绘图错误:\n{str(e)}',
                         ha='center', va='center', color='red')
            self.canvas.draw()

    def cleanup(self):
        plt.close(self.figure)