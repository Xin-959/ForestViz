# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtWidgets import QMainWindow,QWidget,QTabWidget,QVBoxLayout
from PyQt5.QtCore import QSize
from PyQt5.QtCore import pyqtSlot
from data_import import DataImportTab
from model_train import ModelTrainTab
from visualization import VisualizationTab


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # 窗口基本设置
        self.setWindowTitle("ForestViz - 随机森林交互式可视化工具")
        self.setMinimumSize(QSize(1000, 700))

        # 初始化核心组件
        self._init_ui()
        self._connect_signals()
        self._apply_styles()

        # 状态变量
        self.current_data = None
        self.current_model = None

        # 在最后设置子组件的父窗口引用
        self.data_tab.parent_window = self
        self.train_tab.parent_window = self
        self.viz_tab.parent_window = self

    def _init_ui(self):
        """初始化界面组件"""
        # 创建中央部件和主布局
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # 初始化标签页系统
        self.tabs = QTabWidget()

        # 创建各功能标签页
        self.data_tab = DataImportTab()
        self.train_tab = ModelTrainTab()
        self.viz_tab = VisualizationTab()

        # 添加到标签页系统
        self.tabs.addTab(self.data_tab, "数据导入")
        self.tabs.addTab(self.train_tab, "模型训练")
        self.tabs.addTab(self.viz_tab, "可视化分析")

        # 设置默认标签页
        self.tabs.setCurrentIndex(0)

        # 主布局设置
        layout = QVBoxLayout()
        layout.addWidget(self.tabs)
        central_widget.setLayout(layout)

        # 初始状态控制
        self.train_tab.setEnabled(False)
        self.viz_tab.setEnabled(False)

    def _connect_signals(self):
        """建立信号槽连接"""
        # 数据加载信号
        self.data_tab.data_loaded.connect(self._on_data_loaded)

        # 模型训练信号
        self.train_tab.model_trained.connect(self._on_model_trained)

        # 标签页切换信号
        self.tabs.currentChanged.connect(self._on_tab_changed)

    @pyqtSlot()
    def _on_data_loaded(self):
        """处理数据加载完成事件"""
        self.current_data = self.data_tab.get_data()

        # 更新相关标签页状态
        self.train_tab.setEnabled(True)
        self.viz_tab.setEnabled(False)  # 需要重新训练模型

        # 传递数据到训练标签页
        self.train_tab.update_data(self.current_data)

        # 如果当前在可视化标签页，自动切换回训练标签页
        if self.tabs.currentIndex() == 2:
            self.tabs.setCurrentIndex(1)

    @pyqtSlot(object)
    def _on_model_trained(self, model):
        """处理模型训练完成事件"""
        self.current_model = model
        self.viz_tab.setEnabled(True)
        self.viz_tab.update_plots(model)

        # 自动切换到可视化标签页
        self.tabs.setCurrentIndex(2)

    @pyqtSlot(int)
    def _on_tab_changed(self, index):
        """处理标签页切换事件"""
        # 如果切换到可视化标签页但模型未训练，则自动切换回训练标签页
        if index == 2 and not self.current_model:
            self.tabs.setCurrentIndex(1)

    def _apply_styles(self):
        """应用全局样式表"""
        self.setStyleSheet("""
            /* 主窗口样式 */
            QMainWindow {
                background-color: #F5F5F5;
                font-family: "Microsoft YaHei";
                font-size: 12px;
            }

            /* 标签页容器样式 */
            QTabWidget::pane {
                border: 1px solid #DDD;
                border-radius: 4px;
                padding: 5px;
                background: white;
            }

            /* 标签页标签样式 */
            QTabBar::tab {
                padding: 8px 15px;
                background: #EEE;
                border: 1px solid #DDD;
                border-radius: 4px;
                margin-right: 5px;
                min-width: 100px;
            }

            QTabBar::tab:selected {
                background: #4285F4;
                color: white;
                border-color: #2A75F3;
            }

            QTabBar::tab:hover {
                background: #D6E3F8;
            }

            /* 禁用状态标签页样式 */
            QTabBar::tab:disabled {
                background: #F0F0F0;
                color: #999;
            }

            /* 按钮基础样式 */
            QPushButton {
                background-color: #4285F4;
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 4px;
                min-width: 80px;
            }

            QPushButton:hover {
                background-color: #5A95F5;
            }

            QPushButton:pressed {
                background-color: #2A75F3;
            }

            QPushButton:disabled {
                background-color: #CCCCCC;
                color: #666666;
            }
        """)

    def closeEvent(self, event):
        """重写关闭事件，确保资源正确释放"""
        # 清理matplotlib资源
        self.viz_tab.cleanup()
        super().closeEvent(event)
