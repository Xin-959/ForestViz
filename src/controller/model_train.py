# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'model_train.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (
    QWidget, QSlider, QPushButton,
    QVBoxLayout, QLabel, QMessageBox,QHBoxLayout
)
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split


class ModelTrainTab(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setEnabled(False)  # 初始禁用，等待数据加载
        self.model = None
        self.init_ui()

    def init_ui(self):
        # 主布局
        layout = QVBoxLayout()

        # 决策树数量控件组
        hbox_trees = QHBoxLayout()
        hbox_trees.addWidget(QLabel("决策树数量:"))

        self.slider_n_estimators = QSlider(Qt.Horizontal)
        self.slider_n_estimators.setRange(10, 200)
        self.slider_n_estimators.setValue(100)  # 默认值
        self.label_n_estimators = QLabel("100")  # 数值标签
        self.slider_n_estimators.valueChanged.connect(
            lambda v: self.label_n_estimators.setText(str(v))
        )

        hbox_trees.addWidget(self.slider_n_estimators)
        hbox_trees.addWidget(self.label_n_estimators)
        layout.addLayout(hbox_trees)

        # 最大深度控件组
        hbox_depth = QHBoxLayout()
        hbox_depth.addWidget(QLabel("最大深度:"))

        self.slider_max_depth = QSlider(Qt.Horizontal)
        self.slider_max_depth.setRange(1, 30)
        self.slider_max_depth.setValue(10)  # 默认值
        self.label_max_depth = QLabel("10")  # 数值标签
        self.slider_max_depth.valueChanged.connect(
            lambda v: self.label_max_depth.setText(str(v))
        )

        hbox_depth.addWidget(self.slider_max_depth)
        hbox_depth.addWidget(self.label_max_depth)
        layout.addLayout(hbox_depth)

        # 训练按钮
        self.btn_train = QPushButton("训练模型")
        self.btn_train.clicked.connect(self.train_model)
        layout.addWidget(self.btn_train)

        self.setLayout(layout)

    def train_model(self):
        """训练随机森林模型"""
        if self.parent_window.data_tab.get_data() is None or self.parent_window.data_tab.get_data().empty:
            QMessageBox.warning(self, "错误", "请先加载数据")
            return

        try:
            data = self.parent_window.data_tab.get_data()
            X = data.iloc[:, :-1]  # 假设最后一列是目标变量
            y = data.iloc[:, -1]

            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

            params = {
                'n_estimators': self.slider_n_estimators.value(),
                'max_depth': self.slider_max_depth.value(),
                'random_state': 42
            }

            self.model = RandomForestRegressor(**params)
            self.model.fit(X_train, y_train)

            # 更新可视化
            self.parent_window.viz_tab.update_plots(self.model)

            QMessageBox.information(self, "成功", "模型训练完成!")

        except Exception as e:
            QMessageBox.critical(self, "错误", f"训练失败:\n{str(e)}")