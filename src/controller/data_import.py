# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'data_import.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import (
    QWidget, QPushButton, QTableWidget,
    QTableWidgetItem, QFileDialog, QVBoxLayout, QMessageBox
)
from PyQt5.QtCore import pyqtSignal
import pandas as pd


class DataImportTab(QWidget):
    data_loaded = pyqtSignal()  # 数据加载完成信号

    def get_feature_names(self):
        """获取特征列名（排除最后一列作为目标变量）"""
        if self.data is None or self.data.empty:
            return []
        return self.data.columns[:-1].tolist()  # 假设最后一列是目标变量

    def __init__(self):
        super().__init__()
        self.data = None
        self.init_ui()

    def init_ui(self):
        # 创建控件
        self.btn_load = QPushButton("加载数据", self)
        self.table_preview = QTableWidget(self)
        self.table_preview.setRowCount(0)
        self.table_preview.setColumnCount(0)

        # 布局设置
        layout = QVBoxLayout()
        layout.addWidget(self.btn_load)
        layout.addWidget(self.table_preview)
        self.setLayout(layout)

        # 信号连接
        self.btn_load.clicked.connect(self.load_data)

    def load_data(self):
        """加载CSV/Excel文件"""
        path, _ = QFileDialog.getOpenFileName(
            self, "打开文件", "", "数据文件 (*.csv *.xlsx)"
        )

        if not path:
            return

        try:
            if path.endswith('.csv'):
                self.data = pd.read_csv(path)
            elif path.endswith('.xlsx'):
                self.data = pd.read_excel(path)
            else:
                QMessageBox.warning(self, "错误", "不支持的文件格式")
                return

            # 更新表格预览
            self.update_table_preview()
            self.data_loaded.emit()

        except Exception as e:
            QMessageBox.critical(self, "错误", f"加载文件失败:\n{str(e)}")

    def update_table_preview(self):
        """更新表格预览"""
        self.table_preview.setRowCount(self.data.shape[0])
        self.table_preview.setColumnCount(self.data.shape[1])
        self.table_preview.setHorizontalHeaderLabels(self.data.columns)

        for i, row in self.data.iterrows():
            for j, val in enumerate(row):
                self.table_preview.setItem(i, j, QTableWidgetItem(str(val)))

    def get_data(self):
        """获取加载的数据"""
        return self.data